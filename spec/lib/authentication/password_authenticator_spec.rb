require 'spec_helper'

require 'authentication/password_authenticator'

RSpec.describe Authentication::PasswordAuthenticator do
  describe 'defaults' do
    it 'has correct default values' do
      pepper = 'pepperval'
      authenticator = described_class.new(pepper: pepper)

      expect(authenticator.salt_rounds).to eq(10)
    end
  end

  describe 'hashing' do
    let(:authenticator) { described_class.new(salt_rounds: 1, pepper: pepper) }
    let(:pepper) { 'pepperval' }

    it 'validates a hash that it generates' do
      password = 'pa$$W0rd'

      hash = authenticator.generate_hash(password)
      expect(authenticator.compare_password(password, hash)).to eq(true)
    end

    it 'does not validate a hash against an incorrect password' do
      password = 'pa$$W0rd'

      hash = authenticator.generate_hash(password)
      expect(authenticator.compare_password('somethingElse', hash)).to eq(false)
    end

    it 'validates a hash that is generated by another instance' do
      password = 'pa$$W0rd'
      authenticator2 = described_class.new(salt_rounds: 1, pepper: pepper)

      hash = authenticator.generate_hash(password)
      expect(authenticator2.compare_password(password, hash)).to eq(true)
    end

    it 'does not validate a hash that is generated by an instance with a different pepper' do
      password = 'pa$$W0rd'
      authenticator2 = described_class.new(salt_rounds: 1, pepper: 'somethingElse')

      hash = authenticator.generate_hash(password)
      expect(authenticator2.compare_password(password, hash)).to eq(false)
    end
  end
end
